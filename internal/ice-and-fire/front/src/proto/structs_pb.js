// source: structs.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Contact', null, global);
goog.exportSymbol('proto.LoginRequest', null, global);
goog.exportSymbol('proto.Match', null, global);
goog.exportSymbol('proto.MatchRequest', null, global);
goog.exportSymbol('proto.MyData', null, global);
goog.exportSymbol('proto.RegisterRequest', null, global);
goog.exportSymbol('proto.Response', null, global);
goog.exportSymbol('proto.User', null, global);
goog.exportSymbol('proto.UserList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Contact = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Contact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.Contact.displayName = 'proto.Contact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.User.displayName = 'proto.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegisterRequest = function(opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        proto.RegisterRequest.repeatedFields_,
        null
    );
};
goog.inherits(proto.RegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.RegisterRequest.displayName = 'proto.RegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoginRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.LoginRequest.displayName = 'proto.LoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MyData = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MyData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.MyData.displayName = 'proto.MyData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.MatchRequest.displayName = 'proto.MatchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Match = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Match, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.Match.displayName = 'proto.Match';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.Response.displayName = 'proto.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserList = function(opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        proto.UserList.repeatedFields_,
        null
    );
};
goog.inherits(proto.UserList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.UserList.displayName = 'proto.UserList';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Contact.prototype.toObject = function(opt_includeInstance) {
        return proto.Contact.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Contact} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Contact.toObject = function(includeInstance, msg) {
        var f,
            obj = {
                text: jspb.Message.getFieldWithDefault(msg, 1, '')
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Contact}
 */
proto.Contact.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Contact();
    return proto.Contact.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Contact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Contact}
 */
proto.Contact.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setText(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Contact.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.Contact.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Contact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Contact.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getText();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};

/**
 * optional string text = 1;
 * @return {string}
 */
proto.Contact.prototype.getText = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(
        this,
        1,
        ''
    ));
};

/**
 * @param {string} value
 * @return {!proto.Contact} returns this
 */
proto.Contact.prototype.setText = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.User.prototype.toObject = function(opt_includeInstance) {
        return proto.User.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.User} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.User.toObject = function(includeInstance, msg) {
        var f,
            obj = {
                username: jspb.Message.getFieldWithDefault(msg, 1, ''),
                password: jspb.Message.getFieldWithDefault(msg, 2, '')
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User}
 */
proto.User.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.User();
    return proto.User.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User}
 */
proto.User.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassword(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.User.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPassword();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};

/**
 * optional string username = 1;
 * @return {string}
 */
proto.User.prototype.getUsername = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(
        this,
        1,
        ''
    ));
};

/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setUsername = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.User.prototype.getPassword = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(
        this,
        2,
        ''
    ));
};

/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setPassword = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RegisterRequest.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.RegisterRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.RegisterRequest.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.RegisterRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.RegisterRequest.toObject = function(includeInstance, msg) {
        var f,
            obj = {
                user:
                    (f = msg.getUser()) &&
                    proto.User.toObject(includeInstance, f),
                coordinatesList:
                    (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) ==
                    null
                        ? undefined
                        : f,
                contact:
                    (f = msg.getContact()) &&
                    proto.Contact.toObject(includeInstance, f)
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegisterRequest}
 */
proto.RegisterRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.RegisterRequest();
    return proto.RegisterRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegisterRequest}
 */
proto.RegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.User();
                reader.readMessage(
                    value,
                    proto.User.deserializeBinaryFromReader
                );
                msg.setUser(value);
                break;
            case 2:
                var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
                msg.setCoordinatesList(value);
                break;
            case 3:
                var value = new proto.Contact();
                reader.readMessage(
                    value,
                    proto.Contact.deserializeBinaryFromReader
                );
                msg.setContact(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegisterRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.RegisterRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getUser();
    if (f != null) {
        writer.writeMessage(1, f, proto.User.serializeBinaryToWriter);
    }
    f = message.getCoordinatesList();
    if (f.length > 0) {
        writer.writePackedDouble(2, f);
    }
    f = message.getContact();
    if (f != null) {
        writer.writeMessage(3, f, proto.Contact.serializeBinaryToWriter);
    }
};

/**
 * optional User user = 1;
 * @return {?proto.User}
 */
proto.RegisterRequest.prototype.getUser = function() {
    return /** @type{?proto.User} */ (jspb.Message.getWrapperField(
        this,
        proto.User,
        1
    ));
};

/**
 * @param {?proto.User|undefined} value
 * @return {!proto.RegisterRequest} returns this
 */
proto.RegisterRequest.prototype.setUser = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.RegisterRequest} returns this
 */
proto.RegisterRequest.prototype.clearUser = function() {
    return this.setUser(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegisterRequest.prototype.hasUser = function() {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * repeated double coordinates = 2;
 * @return {!Array<number>}
 */
proto.RegisterRequest.prototype.getCoordinatesList = function() {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(
        this,
        2
    ));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.RegisterRequest} returns this
 */
proto.RegisterRequest.prototype.setCoordinatesList = function(value) {
    return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.RegisterRequest} returns this
 */
proto.RegisterRequest.prototype.addCoordinates = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RegisterRequest} returns this
 */
proto.RegisterRequest.prototype.clearCoordinatesList = function() {
    return this.setCoordinatesList([]);
};

/**
 * optional Contact contact = 3;
 * @return {?proto.Contact}
 */
proto.RegisterRequest.prototype.getContact = function() {
    return /** @type{?proto.Contact} */ (jspb.Message.getWrapperField(
        this,
        proto.Contact,
        3
    ));
};

/**
 * @param {?proto.Contact|undefined} value
 * @return {!proto.RegisterRequest} returns this
 */
proto.RegisterRequest.prototype.setContact = function(value) {
    return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.RegisterRequest} returns this
 */
proto.RegisterRequest.prototype.clearContact = function() {
    return this.setContact(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegisterRequest.prototype.hasContact = function() {
    return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.LoginRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.LoginRequest.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.LoginRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.LoginRequest.toObject = function(includeInstance, msg) {
        var f,
            obj = {
                user:
                    (f = msg.getUser()) &&
                    proto.User.toObject(includeInstance, f)
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoginRequest}
 */
proto.LoginRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.LoginRequest();
    return proto.LoginRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoginRequest}
 */
proto.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.User();
                reader.readMessage(
                    value,
                    proto.User.deserializeBinaryFromReader
                );
                msg.setUser(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoginRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.LoginRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getUser();
    if (f != null) {
        writer.writeMessage(1, f, proto.User.serializeBinaryToWriter);
    }
};

/**
 * optional User user = 1;
 * @return {?proto.User}
 */
proto.LoginRequest.prototype.getUser = function() {
    return /** @type{?proto.User} */ (jspb.Message.getWrapperField(
        this,
        proto.User,
        1
    ));
};

/**
 * @param {?proto.User|undefined} value
 * @return {!proto.LoginRequest} returns this
 */
proto.LoginRequest.prototype.setUser = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.LoginRequest} returns this
 */
proto.LoginRequest.prototype.clearUser = function() {
    return this.setUser(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LoginRequest.prototype.hasUser = function() {
    return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.MyData.prototype.toObject = function(opt_includeInstance) {
        return proto.MyData.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.MyData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.MyData.toObject = function(includeInstance, msg) {
        var f,
            obj = {
                user:
                    (f = msg.getUser()) &&
                    proto.User.toObject(includeInstance, f),
                contact:
                    (f = msg.getContact()) &&
                    proto.Contact.toObject(includeInstance, f)
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MyData}
 */
proto.MyData.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.MyData();
    return proto.MyData.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MyData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MyData}
 */
proto.MyData.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.User();
                reader.readMessage(
                    value,
                    proto.User.deserializeBinaryFromReader
                );
                msg.setUser(value);
                break;
            case 2:
                var value = new proto.Contact();
                reader.readMessage(
                    value,
                    proto.Contact.deserializeBinaryFromReader
                );
                msg.setContact(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MyData.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.MyData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MyData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MyData.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getUser();
    if (f != null) {
        writer.writeMessage(1, f, proto.User.serializeBinaryToWriter);
    }
    f = message.getContact();
    if (f != null) {
        writer.writeMessage(2, f, proto.Contact.serializeBinaryToWriter);
    }
};

/**
 * optional User user = 1;
 * @return {?proto.User}
 */
proto.MyData.prototype.getUser = function() {
    return /** @type{?proto.User} */ (jspb.Message.getWrapperField(
        this,
        proto.User,
        1
    ));
};

/**
 * @param {?proto.User|undefined} value
 * @return {!proto.MyData} returns this
 */
proto.MyData.prototype.setUser = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.MyData} returns this
 */
proto.MyData.prototype.clearUser = function() {
    return this.setUser(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MyData.prototype.hasUser = function() {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Contact contact = 2;
 * @return {?proto.Contact}
 */
proto.MyData.prototype.getContact = function() {
    return /** @type{?proto.Contact} */ (jspb.Message.getWrapperField(
        this,
        proto.Contact,
        2
    ));
};

/**
 * @param {?proto.Contact|undefined} value
 * @return {!proto.MyData} returns this
 */
proto.MyData.prototype.setContact = function(value) {
    return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.MyData} returns this
 */
proto.MyData.prototype.clearContact = function() {
    return this.setContact(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MyData.prototype.hasContact = function() {
    return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.MatchRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.MatchRequest.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.MatchRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.MatchRequest.toObject = function(includeInstance, msg) {
        var f,
            obj = {
                username: jspb.Message.getFieldWithDefault(msg, 1, '')
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchRequest}
 */
proto.MatchRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.MatchRequest();
    return proto.MatchRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchRequest}
 */
proto.MatchRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.MatchRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MatchRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};

/**
 * optional string username = 1;
 * @return {string}
 */
proto.MatchRequest.prototype.getUsername = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(
        this,
        1,
        ''
    ));
};

/**
 * @param {string} value
 * @return {!proto.MatchRequest} returns this
 */
proto.MatchRequest.prototype.setUsername = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Match.prototype.toObject = function(opt_includeInstance) {
        return proto.Match.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Match} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Match.toObject = function(includeInstance, msg) {
        var f,
            obj = {
                ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
                distance: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    2,
                    0.0
                ),
                contact:
                    (f = msg.getContact()) &&
                    proto.Contact.toObject(includeInstance, f)
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Match}
 */
proto.Match.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Match();
    return proto.Match.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Match} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Match}
 */
proto.Match.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setOk(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setDistance(value);
                break;
            case 3:
                var value = new proto.Contact();
                reader.readMessage(
                    value,
                    proto.Contact.deserializeBinaryFromReader
                );
                msg.setContact(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Match.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.Match.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Match} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Match.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOk();
    if (f) {
        writer.writeBool(1, f);
    }
    f = message.getDistance();
    if (f !== 0.0) {
        writer.writeDouble(2, f);
    }
    f = message.getContact();
    if (f != null) {
        writer.writeMessage(3, f, proto.Contact.serializeBinaryToWriter);
    }
};

/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.Match.prototype.getOk = function() {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(
        this,
        1,
        false
    ));
};

/**
 * @param {boolean} value
 * @return {!proto.Match} returns this
 */
proto.Match.prototype.setOk = function(value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional double distance = 2;
 * @return {number}
 */
proto.Match.prototype.getDistance = function() {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(
        this,
        2,
        0.0
    ));
};

/**
 * @param {number} value
 * @return {!proto.Match} returns this
 */
proto.Match.prototype.setDistance = function(value) {
    return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional Contact contact = 3;
 * @return {?proto.Contact}
 */
proto.Match.prototype.getContact = function() {
    return /** @type{?proto.Contact} */ (jspb.Message.getWrapperField(
        this,
        proto.Contact,
        3
    ));
};

/**
 * @param {?proto.Contact|undefined} value
 * @return {!proto.Match} returns this
 */
proto.Match.prototype.setContact = function(value) {
    return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.Match} returns this
 */
proto.Match.prototype.clearContact = function() {
    return this.setContact(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Match.prototype.hasContact = function() {
    return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Response.prototype.toObject = function(opt_includeInstance) {
        return proto.Response.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Response} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Response.toObject = function(includeInstance, msg) {
        var f,
            obj = {
                ok: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
                text: jspb.Message.getFieldWithDefault(msg, 1, '')
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Response();
    return proto.Response.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setOk(value);
                break;
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setText(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.Response.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOk();
    if (f) {
        writer.writeBool(2, f);
    }
    f = message.getText();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};

/**
 * optional bool ok = 2;
 * @return {boolean}
 */
proto.Response.prototype.getOk = function() {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(
        this,
        2,
        false
    ));
};

/**
 * @param {boolean} value
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.setOk = function(value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional string text = 1;
 * @return {string}
 */
proto.Response.prototype.getText = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(
        this,
        1,
        ''
    ));
};

/**
 * @param {string} value
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.setText = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UserList.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.UserList.prototype.toObject = function(opt_includeInstance) {
        return proto.UserList.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.UserList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.UserList.toObject = function(includeInstance, msg) {
        var f,
            obj = {
                usernameList:
                    (f = jspb.Message.getRepeatedField(msg, 1)) == null
                        ? undefined
                        : f
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserList}
 */
proto.UserList.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.UserList();
    return proto.UserList.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserList}
 */
proto.UserList.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addUsername(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserList.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.UserList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserList.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getUsernameList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
};

/**
 * repeated string username = 1;
 * @return {!Array<string>}
 */
proto.UserList.prototype.getUsernameList = function() {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(
        this,
        1
    ));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.UserList} returns this
 */
proto.UserList.prototype.setUsernameList = function(value) {
    return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.UserList} returns this
 */
proto.UserList.prototype.addUsername = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.UserList} returns this
 */
proto.UserList.prototype.clearUsernameList = function() {
    return this.setUsernameList([]);
};

goog.object.extend(exports, proto);
